package src_test

import (
	"fmt"
	"github.com/golangee/src/v2"
	"github.com/golangee/src/v2/golang"
	"github.com/golangee/src/v2/java"
	"testing"
)

func NewTranspilerModel() *src.Module {
	mod := src.NewModule().AddPackages(
		src.NewPackage("github.com/golangee/src/example", "pexample").
			SetDocPreamble("Code generated by golangee/architecture. DO NOT EDIT.").
			SetDoc("... is a cool package showing the transpiler possibilities.\nAnother line of important text.").
			AddSrcFiles(
				src.NewSrcFile("example").
					AddTypes(
						src.NewStruct("Test").
							SetDoc("...is a simple example of defining a class or struct.\n\n    Can we have newlines?"),
					),
			),
	)
	return mod
}

func TestJava(t *testing.T) {
	file := NewTranspilerModel()
	renderedFiles, err := java.Render(file)
	if err != nil {
		fmt.Println(err)
		for _, f := range renderedFiles {
			if f.Error != nil {
				fmt.Println(f.Error)
				fmt.Println(string(f.Buf))
			}
		}
		t.Fatal()
	}

	for _, f := range renderedFiles {
		fmt.Println(f.AbsoluteFileName)
		fmt.Println(string(f.Buf))
	}

}

func TestGo(t *testing.T) {
	file := NewTranspilerModel()
	renderedFiles, err := golang.Render(file)
	if err != nil {
		fmt.Println(err)
		for _, f := range renderedFiles {
			if f.Error != nil {
				fmt.Println(f.Error)
				fmt.Println(string(f.Buf))
			}
		}
		t.Fatal()
	}

	for _, f := range renderedFiles {
		fmt.Println(f.AbsoluteFileName)
		fmt.Println(string(f.Buf))
	}

}

func TestTranspiler(t *testing.T) {
	TestGo(t)
	TestJava(t)
}
